---
- hosts: all
  become: true

  handlers:
    - name: reload postgresql
      service:
        name: postgresql
        state: reloaded

    - name: restart postgresql
      service:
        name: postgresql
        state: restarted

  tasks:
    - name: "Install Aptitude"
      block:
        - name: "Install aptitude"
          apt:
            name: aptitude
            state: latest
            update_cache: true

    - name: "Install Docker"
      block:
        - name: "Install required system packages"
          apt:
            pkg:
              - apt-transport-https
              - ca-certificates
              - curl
              - acl
              - software-properties-common
              - python3-pip
              - virtualenv
              - python3-setuptools
            state: latest
            update_cache: true

        - name: "Add Docker GPG apt Key"
          ansible.builtin.get_url:
            url: https://download.docker.com/linux/ubuntu/gpg
            dest: "{{ docker_gpg_key_path }}"

        - name: "Add Docker Repository"
          apt_repository:
            repo: |
              deb [arch={{ vm_arch }} signed-by={{ docker_gpg_key_path }}]
              https://download.docker.com/linux/ubuntu
              {{ vm_ubuntu_release }} stable
            state: present
            filename: docker

        - name: "Update apt and install docker-ce"
          apt:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-compose-plugin
            state: latest
            update_cache: true

        - name: "Install Docker Module for Python"
          pip:
            name: docker

        - name: "Ensure docker group exists"
          group:
            name: docker
            state: present

        - name: "Create AirNow docker network"
          community.docker.docker_network:
            name: "{{ docker_network_name }}"

    - name: "Setup PostgreSQL"
      block:
        - name: "Install PostgreSQL packages"
          apt:
            pkg:
              - "postgresql-{{ postgres_version }}"
              - "postgresql-contrib-{{ postgres_version }}"
              - libpq-dev
              - python3-psycopg2
            state: latest
            update_cache: true

        - name: "Ping PostgreSQL"
          postgresql_ping:
            db: postgres
            login_unix_socket: "/var/run/postgresql"
            login_user: postgres
          become_user: postgres

        - name: "Create superuser role"
          postgresql_user:
            db: postgres
            login_user: postgres
            login_unix_socket: "/var/run/postgresql"
            name: "{{ db_superuser_name }}"
            password: "{{ vault_db_superuser_password }}"
          become_user: postgres

        - name: "Create read-only user role"
          postgresql_user:
            db: postgres
            login_user: postgres
            login_unix_socket: "/var/run/postgresql"
            name: "{{ db_readonlyuser_name }}"
            password: "{{ vault_db_readonlyuser_password }}"
          become_user: postgres

        - name: "Create database"
          postgresql_db:
            maintenance_db: postgres
            login_user: postgres
            login_unix_socket: "/var/run/postgresql"
            name: "{{ db_name }}"
            owner: "{{ db_superuser_name }}"
          become_user: postgres

        - name: "Configure pg_hba.conf of the first PostgreSQL in the instance"
          postgresql_pg_hba:
            dest: "/etc/postgresql/{{ postgres_version }}/main/pg_hba.conf"
            contype: host
            users: "{{ db_superuser_name }},{{ db_readonlyuser_name }}"
            source: "0.0.0.0/0"
            databases: "{{ db_name }}"
            method: "md5"
          notify:
            - reload postgresql

        - name: "Let PostgreSQL listen to all remote connections"
          postgresql_set:
            login_user: postgres
            login_unix_socket: "/var/run/postgresql"
            name: listen_addresses
            value: '*'
          become_user: postgres
          notify:
            - restart postgresql

        - name: "Create pm25_measurements table"
          postgresql_table:
            login_user: postgres
            login_unix_socket: "/var/run/postgresql"
            db: "{{ db_name }}"
            name: "pm25_measurements"
            columns:
              - datetime timestamp not null
              - location varchar(100) not null
              - aqi numeric null
              - aqi_cat varchar(30) null
              - conc numeric null
              - PRIMARY KEY(datetime, location)
            owner: "{{ db_superuser_name }}"
          become_user: postgres

        - name: "Create cities table"
          postgresql_table:
            login_user: postgres
            login_unix_socket: "/var/run/postgresql"
            db: "{{ db_name }}"
            name: "cities"
            columns:
              - location varchar(100) not null
              - latitude numeric null
              - longitude numeric null
              - latlon varchar(50) null
              - PRIMARY KEY(location)
            owner: "{{ db_superuser_name }}"
          become_user: postgres

    - name: "Clone git repos & build docker images"
      block:
        - name: "Clone airnow-scraper"
          ansible.builtin.git:
            repo: "https://github.com/airnow-dashboard/airnow-scraper.git"
            dest: "{{ git_repo_location }}/airnow-scraper"
            single_branch: yes
            version: master

        - name: "Build airnow-scraper"
          docker_image:
            build:
              path: "{{ git_repo_location }}/airnow-scraper"
            name: airnow-scraper
            tag: latest
            source: build

        - name: "Clone piper"
          ansible.builtin.git:
            repo: "https://{{ vault_github_username }}:{{ vault_github_access_token }}@github.com/airnow-dashboard/piper.git"
            dest: "{{ git_repo_location }}/piper"
            single_branch: yes
            version: master

        - name: "Build piper"
          docker_image:
            build:
              path: "{{ git_repo_location }}/piper"
            name: piper
            tag: latest
            source: build

    - name: "Setup Airflow"
      block:

        - name: "Create airflow group"
          group:
            name: "{{ airflow_group }}"
            state: present

        - name: "Create new user"
          user:
            name: "{{ airflow_user }}"
            create_home: yes
            groups: "{{ airflow_group }},docker"
            state: present

        - name: "Install Airflow & constaints via pip"
          become_user: "{{ airflow_user }}"
          pip:
            name: "apache-airflow[{{ airflow_extras }}]=={{ airflow_version }}"
            extra_args: "--constraint https://raw.githubusercontent.com/apache/airflow/constraints-{{ airflow_version }}/constraints-{{ python_version }}.txt"

        - name: "Initialize Airflow DB"
          shell: "/home/{{ airflow_user }}/.local/bin/airflow db init"
          become_user: "{{ airflow_user }}"

        - name: "Create new Airflow admin"
          shell: |
            /home/{{ airflow_user }}/.local/bin/airflow users create \
            --username {{ airflow_username }} \
            --firstname John \
            --lastname Doe \
            --role Admin \
            --email {{ airflow_email }} \
            --password {{ vault_airflow_password }}
          register: result
          become_user: "{{ airflow_user }}"

        - name: Template a file to /root
          ansible.builtin.template:
            src: ./templates/airflow-scheduler.service.j2
            dest: /lib/systemd/system/airflow-scheduler.service

        - name: Template a file to /root
          ansible.builtin.template:
            src: ./templates/airflow-webserver.service.j2
            dest: /lib/systemd/system/airflow-webserver.service

        - name: Enable airflow services
          service:
            name: airflow-scheduler.service
            enabled: yes
            state: started

        - name: Enable airflow services
          service:
            name: airflow-webserver.service
            enabled: yes
            state: started
